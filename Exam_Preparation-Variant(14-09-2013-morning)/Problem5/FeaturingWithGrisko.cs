using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

class FeaturingWithGrisko
{
    // You are given few letters. Write a program that finds the number of all words with no two consecutive equal character that can be
    // generated by reordering the given letters. The generated words should contain all given letters. If the given word meets the
    // requirements it should also be considered in the count.
    static void Main()
    {
        // On the only input line there will be a single word containing all the letters that you should use for generating the words.
        string input = Console.ReadLine();

        // if input has only one letter no need to find permutations, all possibilities are just 1 the letter itself
        if (input.Length == 1)
        {
            Console.WriteLine(1);
            return;
        }

        HashSet<string> perms = FindPermutations(input);

        // count the words with no two consecutive equal character
        int count = Count(perms);

        // On the only output line write the number of words found.
        Console.WriteLine(count);
    }

    static HashSet<string> FindPermutations(string word)
    {
        // 1. remove first char 
        // 2. find permutations of the rest of chars
        // 3. Attach the first char to each of those permutations.
        //     3.1  for each permutation, move firstChar in all indexes to produce even more permutations.
        // 4. Return list of possible permutations.

        if (word.Length == 2)
        {
            char[] _c = word.ToCharArray();
            string s = new string(new char[] { _c[1], _c[0] });
            return new HashSet<string>
                {
                    word,
                    s
                };
        }

        HashSet<string> _result = new HashSet<string>();
        HashSet<string> _subsetPermutations = FindPermutations(word.Substring(1));
        char _firstChar = word[0];
        foreach (string s in _subsetPermutations)
        {
            string _temp = _firstChar.ToString() + s;
            _result.Add(_temp);
            char[] _chars = _temp.ToCharArray();
            for (int i = 0; i < _temp.Length - 1; i++)
            {
                char t = _chars[i];
                _chars[i] = _chars[i + 1];
                _chars[i + 1] = t;
                string s2 = new string(_chars);
                _result.Add(s2);
            }
        }

        return _result;
    }

    static bool IsValid(string word)
    {
        for (int i = 1; i < word.Length; i++)
        {
            if (word[i]==word[i-1])
            {
                return false;
            }
        }

        return true;
    }

    static int Count(HashSet<string> list)
    {
        int count = 0;

        foreach (var perm in list)
        {
            if (IsValid(perm))
            {
                count++;
            }
        }

        return count;
    }

}
