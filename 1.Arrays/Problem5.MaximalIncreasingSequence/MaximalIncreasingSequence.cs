using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;

namespace Problem5.MaximalIncreasingSequence
{
    class MaximalIncreasingSequence
    {
        static void Main()
        {
            Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;

            // Write a program that finds the maximal increasing sequence in an array

            // Примерни масиви за тестване 
            //int[] arr1 = { 3, 2, 3, 4, 2, 2, 4 };
            //int[] arr1 = { -1, -2, -3, 4, 2, 2, 4 };
            //int[] arr1 = { -1, 0, 1, 2, 4, -3, -2, -1, 0 };
            //int[] arr1 = { -1, 0, 1, 2, 4, 2, 4 };
            //int[] arr1 = { -3, -2, -1, 4, 2, 2, 4 };
            int[] arr1 = { 3, -1, -2, -1, 2, 2, 4 };
            //int[] arr1 = { 3, 2, 3, 4, 3, 4, 5 };

            // Логика:подобно на предната задача, за най-голяма поредица, ще минем по целият масив, като започнем от елемент 1, за да 
            // можем да сравняваме предходния такъв и ще проверяваме дали текущият елемент е с единица по-голям от предходният.Ако е 
            // така значи имаме пореден елемент от нарастваща поредица, ако ли не значи имаме начало на нова поредица.
            // Ще записваме индексите на поредиците в един List, а дължините на съответните поредици в друг List.
            // След това ще сглобим от индексите и съответните дължини всички налични поредици и ще ги запишем в нов масив.
            // Следва да намерим най-голямата нарстваща поредица,като най-голяма ще е тази която има най-много елементи или в случай,
            // че има две с еднакви дължини тази чийто последен елемент е по-голям

            // започваме от първият индекс 0
            int startIndex = 0;
            // най-малката дължина ще е 1
            int length = 1;

            // създаваме си двата листа - 1 за индексите за начало на поредица и 1 за дължините на съответните поредици
            List<int> startIndexes = new List<int>();
            List<int> lengths = new List<int>();

            // Приемаме, че първият индекс е начало на нарастваща поредица, било то и от 1 елемент, затова го записваме
            startIndexes.Add(startIndex);

            // минаваме по целия масив започвайки от елемент 1 и проверяваме
            for (int i = 1; i < arr1.Length; i++)
            {
                // ако стойността на текущият елемент минус стойността на предходния такъв е равна на -1, значи имаме начало на нова 
                // поредица, тъй като това значи че текущият елемент би бил част от намаляваща поредица, а ние търсим само нарастващи
                if (arr1[i] - arr1[i - 1] == -1)
                {
                    // затова записваме за начален индекс на поредица текущият такъв
                    startIndex = i;
                    // добавяме го към List-а
                    startIndexes.Add(startIndex);
                    // към List-а с дължините записваме текущата дължина
                    lengths.Add(length);
                    // и я зануляваме
                    length = 1;
                }
                // ако ли пък стойността на текущият елемент минус стойността на предходния такъв е различна от 1(тъй като само ако е
                // равна на 1 елемента ще е част от нарастваща поредица) значи имаме начало на нова поредица и изпълняваме същите 
                // стъпки като по-горе
                else if (arr1[i] - arr1[i - 1] != 1)
                {
                    startIndex = i;
                    startIndexes.Add(startIndex);
                    lengths.Add(length);
                    length = 1;
                }
                // във всички други случаи, значи имаме стойност на текущият елемент минус стойността на предходния такъв равно на 1
                else
                {
                    // следователно текущият елемент е част от нарастваща поредица и просто увеличаваме дължината й
                    length++;
                }
            }

            // накрая като излезем от цикъла трябва да запишем и последната текуща дължина в нейният List
            lengths.Add(length);

            // вече имаме началата на всички нарастващи поредици и техните дължини,следва да ги сглобим в един стринг масив
            string[] sequences = new string[startIndexes.Count];

            // за целта минаваме по всички елементи
            for (int i = 0; i < sequences.Length; i++)
            {
                // създаваме си временна променлива, в която ще сглобяваме текущата поредица
                string newSequence = "";
                // тъй като имаме нарастваща поредица ще ни трябва поредният индекс, затова началният индекс го записваме в една 
                // временна променлива, която ще увеличаваме
                int tempIndex = startIndexes[i];
                // с един цикъл вземаме индекса за начало на поредица, записваме го във временната ни променлива и добавяме 
                // стойността на поредният индекс в първоначалният ни масив, това се случва толкова пъти колкото е дължината
                // на тази поредица
                for (int j = 0; j < lengths[i]; j++)
                {
                    newSequence += arr1[tempIndex].ToString();
                    tempIndex++;
                }
                // накрая сглобената поредица записваме в текущ елемент на стринг масива
                sequences[i] = newSequence;
            }

            // вече имаме всички нарастващи поредици записани една след друга в отделен масив, следва да намерим най-голямата

            // дължината на най-голямата пъвоначално е 0 
            int maxLength = 0;
            // в отделна променлива ще записваме най-голямата поредица, пъвоначално тя е празна
            string maxSequence = "";
            // за да избегнем проблема с дължините на поредици в които участват отрицателни числа, ще броим всички знаци "-"
            int count = 0;

            // с един цикъл минаваме по всяка поредица
            for (int i = 0; i < sequences.Length; i++)
            {
                // при всяка итерация ще се занулява намереният брой "-"
                count = 0;
                // с този цикъл ще преброяваме "-", ако има такива
                foreach (char symbol in sequences[i])
                {
                    if (symbol == '-')
                    {
                        count++;
                    }
                }
                // след като знаем колко "-" има нашата поредица, изваждаме техният брой от цялата дължина и сравняваме с най-голямата 
                // дължина за момента(ако няма отрицателни числа броят "-" ще е 0 и дължината пак ще е коректна), ако тя е по-голяма:
                if (sequences[i].Length - count > maxLength)
                {
                    // най-голямата дължина става дължината на текущата поредица минус броя "-"
                    maxLength = sequences[i].Length - count;
                    // и съответно текущата поредица става най-голямата такава
                    maxSequence = sequences[i];
                }
                // иначе ако дължината на текущата поредица намалена с броя "-" е равна на най-голямата за момента дължина 
                else if (sequences[i].Length - count == maxLength)
                {
                    // сравняваме последните елементи на текущата поредица и на най-голямата такава, по-големият ще определи 
                    // най-голямата поредица от двете
                    if (sequences[i][sequences[i].Length - 1] > maxSequence[maxSequence.Length - 1])
                    {
                        maxSequence = sequences[i];
                    }
                }
            }

            // на финала проверяваме дали най-голямата дължина е по-голяма от 1 елемент.
            // ако да отпечатваме най-голямата поредица и от колко елемента се състои
            if (maxLength > 1)
            {
                Console.WriteLine("The maximal increasing sequence is: {0} ({1} elements)", maxSequence, maxLength);
            }
            // ако не е по-голяма от 1 елемент значи нямаме нарастваща поредица и съответно го отпечатваме
            else
            {
                Console.WriteLine("There is no increasing sequences in the array!");
            }

        }
    }
}
